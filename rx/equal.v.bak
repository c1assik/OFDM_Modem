module equal (

input clk, rst, sop,
input signed [15:0] i_data,q_data,
output reg signed [15:0] o_data_i,o_data_q,
output reg new_sop

) 


reg [1:0] index[1055:0];
reg value[90:0];
reg [14:0] B;
reg [6:0] count_pilot_value;
reg [10:0] count;
reg [15:0] sift_i[10:0];
reg [15:0] sift_q[10:0];
reg sift_sop[10:0];








initial
begin
	$readmemb("index.txt", index);
	$readmemb("value.txt", value);
	o_data_i = 0;
	o_data_q = 0;
	new_sop = 0;
	count = 11'd0;
	count_pilot_value = 7'd0;
	B = 15'd2048;  // pilots
	ocenka_1 = 0;
	ocenka_2 = 0;
	mid_ocenka = 0;
end

always @(posedge clk or posedge rst)
begin
if (rst)	
	begin
		count <= 1'b0;
		count_pilot <= 1'b0;
		count_rom <= 1'b0;
	end
	else if (sop) 
		begin
			count <= 1'b1;
			count_pilot_value <= 1'b0;
		end
			else 
			begin
				count <= count + 1'b1;
				if (index[count] == 2'b01) count_pilot_value <= count_pilot_value + 1'b1;
			end 
end			

reg [9:0] ocenka_1,ocenka_2,mid_ocenka;


always @(posedge clk or posedge rst)
begin
if (rst)	
	begin
		ocenka_1 <= 1'b0;
		ocenka_2 <= 1'b0;
	end
	else begin
		if (index[count] == 2'b01) begin
			ocenka_1 <= ocenka_2;
			if (value[count_pilot_value] == 0) ocenka_2 <= i_data / B; 
			else ocenka_2 <= i_data / (-B);			
			end
		mid_ocenka <= (ocenka_1 + ocenka_2) >> 1;
		o_data_i <= / mid_ocenka;
		o_data_q <= / mid_ocenka;
	end	
end			











endmodule
