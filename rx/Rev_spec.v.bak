module Rev_spec
(
	input clk, en, rst, in_sop,
	input signed [15:0] in_i, in_q,
	output reg signed [15:0] out_i, out_q,
	output reg sop_out
);

reg count;
reg [3:0] control;


initial
begin
	count = 0;
	control = 0;
end

always @(posedge clk or posedge rst) begin
	if (rst) control <= 0;
	else if (control == 4'd14) control <= 4'b0001;
	else if (in_sop) control <= control + 1;
end



always @(posedge clk or posedge rst) begin
	if (rst) count <= 0;
	else count <= ~count;
end

always @(posedge clk) begin
	sop_out <= in_sop;
	if ((control == 0) && (in_sop == 0)) begin 
	out_i <= 0;
	out_q <= 0;
	end
	else begin
	out_i <= count ? in_i : (~in_i + 1);
	out_q <= count ? in_q : (~in_q + 1);
	end
end

endmodule